AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Main template for Load Balancer with all resources included, supporting mutual TLS and ECS Fargate deployment

Parameters:
  StackName:
    Type: String

  EnableMutualTLS:
    Type: String

  TruststoreBucketName:
    Type: String

  TruststoreVersion:
    Type: String

  TruststoreFile:
    Type: String

  VersionNumber:
    Type: String

  CommitId:
    Type: String

  ContainerPort:
    Type: Number
    Default: 9000

  ContainerPortValidator:
    Type: Number
    Default: 9001

  Environment:
    Type: String
    AllowedValues:
      - dev
      - test
      - qa
      - int
      - ref
      - prod
    Default: dev
  LogRetentionInDays:
    Type: Number
  LogLevel:
    Type: String
  ValidatorLogLevel:
    Type: String
    Default: INFO
  TargetSpineServer:
    Type: String
  DockerImageTag:
    Type: String
  ToAsid:
    Type: String
  ToPartyKey:
    Type: String
  EnableDefaultAsidPartyKey:
    Type: String
  DefaultPtlAsid:
    Type: String
  DefaultPtlPartyKey:
    Type: String

Conditions:
  CreateTruststore: !Equals [!Ref EnableMutualTLS, true]
  IsRefOrProd: !Or
    - !Equals [!Ref Environment, ref]
    - !Equals [!Ref Environment, prod]

Resources:
  # Security Group for the Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-resources:VpcId
      GroupDescription: Allow inbound HTTPS traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-lb-sg"

  # ACM Certificate Generation
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join:
          - "."
          - - !Ref StackName
            - !ImportValue eps-route53-resources:EPS-domain
      DomainValidationOptions:
        - DomainName:
            Fn::Join:
              - "."
              - - !Ref StackName
                - !ImportValue eps-route53-resources:EPS-domain
          HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !ImportValue account-resources:ALBLoggingBucketName
        - Key: access_logs.s3.prefix
          Value: !Sub "${StackName}/access"
        - Key: connection_logs.s3.enabled
          Value: true
        - Key: connection_logs.s3.bucket
          Value: !ImportValue account-resources:ALBLoggingBucketName
        - Key: connection_logs.s3.prefix
          Value: !Sub "${StackName}/connection"
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Split [",", !ImportValue vpc-resources:PublicSubnets]

  # Trust Store for mTLS Authentication
  Truststore:
    Type: AWS::ElasticLoadBalancingV2::TrustStore
    Condition: CreateTruststore
    Properties:
      CaCertificatesBundleS3Bucket: !Ref TruststoreBucketName
      CaCertificatesBundleS3Key: !Ref TruststoreFile
      Name: !Sub "${StackName}-trst"
      Tags:
        - Key: "StackName"
          Value: !Ref StackName

  # HTTPS Listener with Optional mTLS
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref GenerateCertificate
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      MutualAuthentication: !If
        - CreateTruststore
        - { Mode: verify, TrustStoreArn: !GetAtt Truststore.TrustStoreArn }
        - !Ref "AWS::NoValue"

  # Target Group Configuration
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /_healthcheck
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId: !ImportValue vpc-resources:VpcId

  # Route 53 DNS Record for the Load Balancer
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue eps-route53-resources:EPS-ZoneID
      Name: !Join
        - "."
        - - !Ref StackName
          - !ImportValue eps-route53-resources:EPS-domain
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: False
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  # ECS Cluster Setup
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StackName}-cluster"

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !ImportValue account-resources:LambdaAccessSecretsPolicy
        - !ImportValue account-resources:LambdaDecryptSecretsKMSPolicy
        - !ImportValue secrets:epsSigningCertChainManagedPolicy
      RoleName: !Sub "${StackName}-ecsTaskExecutionRole"

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${StackName}-task"
      Cpu: "2048"
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${StackName}-coordinator"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/fhir-facade-repo:${DockerImageTag}"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: VALIDATOR_HOST
              Value: !Sub "${StackName}-validator"
            - Name: TARGET_SPINE_SERVER
              Value: !Ref TargetSpineServer
            - Name: MTLS_SPINE_CLIENT
              Value: True
            - Name: PRESCRIBE_ENABLED
              Value: true
            - Name: DISPENSE_ENABLED
              Value: true
            - Name: COMMIT_ID
              Value: !Ref CommitId
            - Name: CRL_DISTRIBUTION_DOMAIN
              Value: crl.nhs.uk
            - Name: CRL_DISTRIBUTION_PROXY
              Value: crl.nhs.uk
            - Name: DEPLOYED_VERSION
              Value: !Ref VersionNumber
            - Name: DOSE_TO_TEXT_MODE
              Value: AUDIT
            - Name: ENVIRONMENT
              Value: internal-dev
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: NODE_ENV
              Value: production
            #- Name: ODS_URL
            #  Value: /ptl/platform-common/egress/hosts/directory-spineservices
            - Name: SANDBOX
              Value: 0
            - Name: TO_ASID
              Value: !Ref ToAsid
            - Name: TO_PARTY_KEY
              Value: !Ref ToPartyKey
            - Name: USE_SHA256_PREPARE
              Value: false
            - Name: ENABLE_DEFAULT_ASID_PARTY_KEY
              Value: !Ref EnableDefaultAsidPartyKey
            - Name: DEFAULT_PTL_ASID
              Value: !Ref DefaultPtlAsid
            - Name: DEFAULT_PTL_PARTY_KEY
              Value: !Ref DefaultPtlPartyKey
          Secrets:
            - Name: SpinePrivateKey
              ValueFrom: !ImportValue account-resources:SpinePrivateKey
            - Name: SpinePublicCertificate
              ValueFrom: !ImportValue account-resources:SpinePublicCertificate
            - Name: SpineCAChain
              ValueFrom: !ImportValue account-resources:SpineCAChain
            - Name: SUBCACC_CERT
              ValueFrom: !ImportValue secrets:epsSigningCertChain
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CoordinatorLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
        - Name: !Sub "${StackName}-validator"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/validator-repo:${DockerImageTag}"
          PortMappings:
            - ContainerPort: !Ref ContainerPortValidator
              Protocol: tcp
          Environment:
            - Name: LOG_LEVEL
              Value: !Ref ValidatorLogLevel
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ValidatorLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  # ECS Service Configuration
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTPS
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${StackName}-service"
      DesiredCount: !If
        - IsRefOrProd
        - 2
        - 1
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !Split [",", !ImportValue vpc-resources:PrivateSubnets]
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${StackName}-coordinator"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # ECS Service Auto Scaling Role
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Condition: IsRefOrProd
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      RoleName: !Sub "${StackName}-ecsAutoScalingRole"

  # ECS Service Auto Scaling Target
  ECSServiceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: IsRefOrProd
    DependsOn: ECSService
    Properties:
      MinCapacity: 2
      MaxCapacity: 10
      ResourceId: !Sub "service/${ECSCluster}/${StackName}-service"
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # ECS Service Auto Scaling Policy
  ECSServiceAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: IsRefOrProd
    Properties:
      PolicyName: !Sub "${StackName}-ecsAutoScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 60
        TargetValue: 70.0

  # CloudWatch Log Group for ECS
  CoordinatorLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
          - CW_LOGGROUP_RETENTION_PERIOD_CHECK
    Properties:
      LogGroupName: !Sub /aws/ecs/${StackName}-coordinator
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  CoordinatorSplunkSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
      LogGroupName: !Ref CoordinatorLogGroup
      FilterPattern: ""
      DestinationArn: !ImportValue lambda-resources:SplunkDeliveryStream

  ValidatorLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      guard:
        SuppressedRules:
          - CW_LOGGROUP_RETENTION_PERIOD_CHECK
    Properties:
      LogGroupName: !Sub /aws/ecs/${StackName}-validator
      RetentionInDays: !Ref LogRetentionInDays
      KmsKeyId: !ImportValue account-resources:CloudwatchLogsKmsKeyArn

  ValidatorSplunkSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !ImportValue lambda-resources:SplunkSubscriptionFilterRole
      LogGroupName: !Ref ValidatorLogGroup
      FilterPattern: ""
      DestinationArn: !ImportValue lambda-resources:SplunkDeliveryStream

  # Security Group for the ECS Containers
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-resources:VpcId
      GroupDescription: Security group for ECS containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-ecs-sg"

Outputs:
  Endpoint:
    Description: Load Balancer Endpoint
    Value: !Sub "https://${StackName}.${!ImportValue eps-route53-resources:EPS-domain}"

  LoadBalancerArn:
    Description: ARN of the Load Balancer
    Value: !Ref LoadBalancer

  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref TargetGroup

  SecurityGroupIds:
    Description: Security Group IDs associated with the Load Balancer
    Value: !Join [",", [!Ref LoadBalancerSecurityGroup]]

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt ECSService.Name

  ECSTaskDefinitionArn:
    Description: ARN of the ECS Task Definition
    Value: !Ref ECSTaskDefinition
