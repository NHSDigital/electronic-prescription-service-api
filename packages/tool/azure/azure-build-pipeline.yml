name: "$(SourceBranchName)+$(BuildID)"

trigger:
  branches:
    include:
      - tags/refs/v*
  tags:
    include:
      - v*

pr:
  branches:
    include: ["*"]

resources:
  repositories:
    - repository: common
      type: github
      name: NHSDigital/api-management-utils
      ref: refs/heads/edge
      endpoint: NHSDigital

variables:
  - template: project.yml

extends:
  template: azure/common/apigee-build.yml@common
  parameters:
    service_name: ${{ variables.service_name }}
    short_service_name: ${{ variables.short_service_name }}
    cache_steps:
      - bash: |
          make prepare-for-epsat-release
          VALIDATOR_VERSION=v1.0.200-alpha
          sed -i "s/{{ VALIDATOR_VERSION }}/$VALIDATOR_VERSION/g" ecs-proxies-deploy-int.yml
          sed -i "s/{{ VALIDATOR_VERSION }}/$VALIDATOR_VERSION/g" ecs-proxies-deploy-internal-dev-sandbox.yml
          sed -i "s/{{ VALIDATOR_VERSION }}/$VALIDATOR_VERSION/g" ecs-proxies-deploy-internal-qa.yml
          sed -i "s/{{ VALIDATOR_VERSION }}/$VALIDATOR_VERSION/g" ecs-proxies-deploy-sandbox.yml
          sed -i "s/{{ VALIDATOR_VERSION }}/$VALIDATOR_VERSION/g" ecs-proxies-deploy.yml

          # Replace all eps artifacts with eps-api-tool artifacts by
          #   - Moving examples project resources into eps-api-tool
          #   - Deleting all other eps artifacts
          #   - Moving eps-api-tool artifacts from tool/ directory to root directory
          # Having root directory CI/CD files is required by platforms
          ls -R
        workingDirectory: "${{ variables.service_name }}"
        displayName: Prepare eps-api-tool
      - task: NodeTool@0
        displayName: Use Node v20.10.0
        inputs:
          versionSpec: "20.10.0"
      - task: UseDotNet@2
        inputs:
          version: "3.1.x"
    test_steps:
      - bash: "make check-language-versions"
        displayName: Check consistent language version
        workingDirectory: "${{ variables.service_name }}"
      - bash: "make test"
        displayName: Run Quality Checks
        workingDirectory: "${{ variables.service_name }}"
      - task: PublishTestResults@2
        displayName: "Publish Test Results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "**/junit.xml"
          searchFolder: "${{ variables.service_name }}"
          mergeTestResults: true
          testRunTitle: "EPS Tests"
          failTaskOnFailedTests: true
        condition: always()
