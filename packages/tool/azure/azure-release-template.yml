parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: service_base_path
    type: string
  - name: manual_approval_env
    type: string
  - name: apigee_deployments
    type: object

extends:
  template: azure/common/apigee-deployment.yml@common
  parameters:
    service_name: ${{ parameters.service_name }}
    short_service_name: ${{ parameters.short_service_name }}
    service_base_path: ${{ parameters.service_base_path }}
    manual_approval_env: ${{ parameters.manual_approval_env }}
    apigee_deployments: ${{ parameters.apigee_deployments }}
    prod_requires_approval: true
    post_deploy:
      - bash: |
          if [ "$(APIGEE_ENVIRONMENT)" == "internal-dev" ]
          then
            echo "##vso[task.setvariable variable=is_internal_dev]true"
          else
            echo "##vso[task.setvariable variable=is_internal_dev]false"
          fi

          if [ "$(APIGEE_ENVIRONMENT)" == "int" ] || [ "$(APIGEE_ENVIRONMENT)" == "prod" || [ "$(APIGEE_ENVIRONMENT)" == "internal-qa" ]
          then
            echo "##vso[task.setvariable variable=run_selenium_tests]false"
          else
            echo "##vso[task.setvariable variable=run_selenium_tests]true"
          fi
        displayName: Check is internal-dev
      - task: NodeTool@0
        displayName: Use Node v20.10.0
        inputs:
          versionSpec: "23.9.0"
      - bash: |
          #!/bin/bash

          set -euo pipefail

          export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
          export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)

          # Poll deploying API until our deployed version matches the release version
          if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
              envPrefix="$APIGEE_ENVIRONMENT."
          fi;
          url="https://${envPrefix}api.service.nhs.uk/$SERVICE_BASE_PATH/_status"
          interval_in_seconds=5
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 60 ]
          do
          echo "attempt: ${attempts}"
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId" || echo "not_found")
          dependenciesUp=$(echo "$responseData" | jq -r ".status" || echo "not_found")
          if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          echo "sleeping ${interval_in_seconds} seconds"
          sleep $interval_in_seconds;
          done

          if [ $success == 0 ]
          then
              echo "Smoke tests failed, API was not ready in time"
              exit 255
          fi
        displayName: Wait for EPSAT deploy
      - bash: |
          #!/bin/bash

          set -euo pipefail

          export SERVICE_BASE_PATH=$(SERVICE_BASE_PATH)
          export API_BASE_PATH=${SERVICE_BASE_PATH//eps-api-tool/electronic-prescriptions}
          export APIGEE_ENVIRONMENT=$(APIGEE_ENVIRONMENT)

          # Poll EPS API until our deployed version of EPS matches the release version
          if [ "$APIGEE_ENVIRONMENT" != "prod" ]; then
              envPrefix="$APIGEE_ENVIRONMENT."
          fi;
          url="https://${envPrefix}api.service.nhs.uk/$API_BASE_PATH/_status"
          interval_in_seconds=20
          releaseCommit="$(Build.SourceVersion)"
          printf "\nPolling %s every %s seconds, until commit is: %s\n" "$url" "$interval_in_seconds" "$releaseCommit"
          attempts=0
          success=0
          until [ $attempts -eq 30 ]
          do
          echo "attempt: ${attempts}"
          responseData=$(curl -H "apiKey: $(status-endpoint-api-key)" "$url" -s)
          deployedCommit=$(echo "$responseData" | jq -r ".commitId" || echo "not_found")
          dependenciesUp=$(echo "$responseData" | jq -r ".status" || echo "not_found")
          if [ "$deployedCommit" == "$releaseCommit" ] && [ "$dependenciesUp" == "pass" ]; then
              success=1
              break;
          fi;
          ((attempts=attempts+1))
          echo "sleeping ${interval_in_seconds} seconds"
          sleep $interval_in_seconds;
          done

          if [ $success == 0 ]
          then
              echo "Smoke tests failed, API was not ready in time"
              exit 255
          fi
        displayName: Wait for EPS API deploy
      - bash: |
          #!/bin/bash

          set -euo pipefail

          cd "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/"
          npm ci --workspaces --if-present --include-workspace-root
          if [ "$(APIGEE_ENVIRONMENT)" == "internal-dev-sandbox" ] || [ "$(APIGEE_ENVIRONMENT)" == "sandbox" ]
          then
              npm run test-sandbox --workspace packages/tool/e2e-tests
          else
              npm run test-live --workspace packages/tool/e2e-tests
          fi
        condition: and(succeeded(), eq(variables['run_selenium_tests'], 'true'))
        displayName: Run smoke tests
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/tool/e2e-tests/test_results"
          artifactName: "smoke-tests"
          publishLocation: "Container"
        condition: eq(variables['run_selenium_tests'], 'true')
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "**/junit.xml"
          searchFolder: "$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/packages/tool/e2e-tests/test_results"
        condition: eq(variables['run_selenium_tests'], 'true')
