name: cdk release code

on:
  workflow_call:
    inputs:
      STACK_NAME:
        required: true
        type: string
      AWS_ENVIRONMENT:
        required: true
        type: string
      APIGEE_ENVIRONMENT:
        required: true
        type: string
      ENABLE_MUTUAL_TLS:
        required: true
        type: boolean
      TRUSTSTORE_FILE:
        required: true
        type: string
      VERSION_NUMBER:
        required: true
        type: string
      COMMIT_ID:
        required: true
        type: string
      LOG_LEVEL:
        required: true
        type: string
      VALIDATOR_LOG_LEVEL:
        required: false
        type: string
        default: INFO
      LOG_RETENTION_DAYS:
        required: true
        type: string
      # CREATE_INT_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # CREATE_INT_RC_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # CREATE_PROD_RELEASE_NOTES:
      #   type: boolean
      #   default: false
      # MARK_JIRA_RELEASED:
      #   type: boolean
      #   default: false
      DEPLOY_APIGEE:
        type: boolean
        default: true
      TARGET_SPINE_SERVER:
        required: true
        type: string
      DOCKER_IMAGE_TAG:
        required: true
        type: string
      RUN_REGRESSION_TEST:
        required: true
        type: boolean
      TO_ASID:
        required: true
        type: string
      TO_PARTY_KEY:
        required: true
        type: string
      IS_PULL_REQUEST:
        type: boolean
        default: true
      ENABLE_DEFAULT_ASID_PARTY_KEY:
        type: boolean
      SHA1_ENABLED_APPLICATION_IDS:
        type: string
        required: true
      SANDBOX_MODE_ENABLED:
        type: string
        required: true
      DESIRED_FHIR_FACADE_COUNT:
        type: number
        required: true
      DESIRED_CLAIMS_COUNT:
        type: number
        required: true
      DESIRED_PEAK_CLAIMS_COUNT:
        type: number
        required: true
      DESIRED_OFF_PEAK_CLAIMS_COUNT:
        type: number
        required: true
      SERVICE_CPU:
        type: number
        required: true
      SERVICE_MEMORY:
        type: number
        required: true
      MTLS_KEY:
        type: string
        required: true
      FORWARD_CSOC_LOGS:
        type: boolean
        required: true
    secrets:
      CLOUD_FORMATION_DEPLOY_ROLE:
        required: true
      CDK_PULL_IMAGE_ROLE:
        required: true
      DEV_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      INT_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      PROD_CLOUD_FORMATION_CHECK_VERSION_ROLE:
        required: false
      DEV_CLOUD_FORMATION_EXECUTE_LAMBDA_ROLE:
        required: false
      PROXYGEN_ROLE:
        required: false
      REGRESSION_TESTS_PEM:
        required: false
      API_CLIENT_ID:
        required: false
      API_CLIENT_SECRET:
        required: false
      SIGNING_PRIVATE_KEY:
        required: false
      SIGNING_CERT:
        required: false
      DEFAULT_PTL_ASID:
        required: false
      DEFAULT_PTL_PARTY_KEY:
        required: false
jobs:
  release_code_and_api:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.AWS_ENVIRONMENT }}
    name: deploy to ${{ inputs.AWS_ENVIRONMENT }}
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout local github actions
        uses: actions/checkout@v5
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0
          sparse-checkout: |
            .github

      - name: Configure AWS Credentials
        id: connect-aws-pull-image
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CDK_PULL_IMAGE_ROLE }}
          role-session-name: prescription-clinical-tracker-ui-pull-image

      - name: Retrieve AWS Account ID
        id: retrieve-pull-image-account-id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

      - name: Login to Amazon ECR
        id: login-ecr-pull-image
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Pull cdk-utils-build from Amazon ECR
        run: |
          docker pull "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest"
          docker tag "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/cdk-utils-build-repo:latest" cdk-utils-build-repo:latest

      - name: build_artifact download
        uses: actions/download-artifact@v6
        with:
          name: cdk_artifact

      - name: docker_artifact download
        uses: actions/download-artifact@v6
        with:
          name: docker_artifact
          path: .

      - name: Extract FHIR Facade docker image
        id: extract-FHIR-facade-image
        run: |
          docker load -i FHIR_facade_docker.img

      - name: Extract validator docker image
        id: extract-validator-image
        run: |
          docker load -i validator_docker.img

      - name: extract build_artifact
        run: |
          mkdir -p .build
          tar -xf artifact.tar -C .build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        id: connect-aws-deploy
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.CLOUD_FORMATION_DEPLOY_ROLE }}
          role-session-name: fhir-facade-cloud-formation-deploy
          output-credentials: true

      - name: Retrieve AWS Account ID
        id: retrieve-deploy-account-id
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> "$GITHUB_ENV"

      - name: Login to Amazon ECR
        id: login-ecr-push-image
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com

      - name: Push FHIR Facade image to Amazon ECR
        run: |
          docker tag "fhir-facade-repo:${{ inputs.VERSION_NUMBER }}" "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/fhir-facade-repo:${{ inputs.DOCKER_IMAGE_TAG }}"
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/fhir-facade-repo:${{ inputs.DOCKER_IMAGE_TAG }}"

      - name: Push Validator image to Amazon ECR
        run: |
          docker tag "validator-repo:${{ inputs.VERSION_NUMBER }}" "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/validator-repo:${{ inputs.DOCKER_IMAGE_TAG }}"
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com/validator-repo:${{ inputs.DOCKER_IMAGE_TAG }}"

      - name: Check fhir facade scan results
        env:
          REPOSITORY_NAME: fhir-facade-repo
          IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
        working-directory: .github/scripts
        run: |
          ./check_ecr_image_scan_results.sh

      - name: Check validator scan results
        env:
          REPOSITORY_NAME: validator-repo
          IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
        working-directory: .github/scripts
        run: |
          ./check_ecr_image_scan_results.sh

      - name: fix cdk.json for deployment
        run: |
          ./.github/scripts/fix_cdk_json.sh
        env:
          TRUSTSTORE_FILE: ${{ inputs.TRUSTSTORE_FILE }}
          SERVICE_NAME: "${{ inputs.STACK_NAME }}"
          VERSION_NUMBER: "${{ inputs.VERSION_NUMBER }}"
          LOG_RETENTION_IN_DAYS: "${{ inputs.LOG_RETENTION_DAYS }}"
          COMMIT_ID: "${{ inputs.COMMIT_ID }}"
          DOCKER_IMAGE_TAG: "${{ inputs.DOCKER_IMAGE_TAG }}"
          TARGET_SPINE_SERVER: "${{ inputs.TARGET_SPINE_SERVER }}"
          LOG_LEVEL: "${{ inputs.LOG_LEVEL }}"
          TO_ASID: "${{ inputs.TO_ASID }}"
          TO_PARTY_KEY: "${{ inputs.TO_PARTY_KEY }}"
          VALIDATOR_LOG_LEVEL: "${{ inputs.VALIDATOR_LOG_LEVEL }}"
          ENABLE_DEFAULT_ASID_PARTY_KEY: "${{ inputs.ENABLE_DEFAULT_ASID_PARTY_KEY }}"
          DEFAULT_PTL_ASID: "${{ secrets.DEFAULT_PTL_ASID }}"
          DEFAULT_PTL_PARTY_KEY: "${{ secrets.DEFAULT_PTL_PARTY_KEY }}"
          SANDBOX_MODE_ENABLED: "${{ inputs.SANDBOX_MODE_ENABLED }}"
          ENABLE_MUTUAL_TLS: "${{ inputs.ENABLE_MUTUAL_TLS }}"
          SHA1_ENABLED_APPLICATION_IDS: "${{ inputs.SHA1_ENABLED_APPLICATION_IDS }}"
          DESIRED_FHIR_FACADE_COUNT: "${{ inputs.DESIRED_FHIR_FACADE_COUNT }}"
          DESIRED_CLAIMS_COUNT: "${{ inputs.DESIRED_CLAIMS_COUNT }}"
          DESIRED_PEAK_CLAIMS_COUNT: "${{ inputs.DESIRED_PEAK_CLAIMS_COUNT }}"
          DESIRED_OFF_PEAK_CLAIMS_COUNT: "${{ inputs.DESIRED_OFF_PEAK_CLAIMS_COUNT }}"
          SERVICE_CPU: "${{ inputs.SERVICE_CPU }}"
          SERVICE_MEMORY: ${{ inputs.SERVICE_MEMORY }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          IS_PULL_REQUEST: ${{ inputs.IS_PULL_REQUEST }}
          FORWARD_CSOC_LOGS: ${{ inputs.FORWARD_CSOC_LOGS }}

      - name: Show diff
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect-aws-deploy.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect-aws-deploy.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect-aws-deploy.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="true" \
          -e DEPLOY_CODE="false" \
          -e CDK_APP_PATH="packages/cdk/bin/PrescribeDispenseApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Deploy code
        run: |
          docker run \
          -v "$(pwd)/.build":/home/cdkuser/workspace/ \
          -e AWS_ACCESS_KEY_ID=${{ steps.connect-aws-deploy.outputs.aws-access-key-id }} \
          -e AWS_SECRET_ACCESS_KEY=${{ steps.connect-aws-deploy.outputs.aws-secret-access-key }} \
          -e AWS_SESSION_TOKEN=${{ steps.connect-aws-deploy.outputs.aws-session-token }} \
          -e AWS_REGION="eu-west-2" \
          -e SHOW_DIFF="false" \
          -e DEPLOY_CODE="true" \
          -e CDK_APP_PATH="packages/cdk/bin/PrescribeDispenseApp.ts" \
          cdk-utils-build-repo:latest
        shell: bash

      - name: Get mtls secrets
        shell: bash
        run: |
          mkdir -p ~/.proxygen/tmp
          client_private_key_arn=$(aws cloudformation list-exports --query "Exports[?Name=='account-resources:FhirFacadeClientKeySecret'].Value" --output text)
          client_cert_arn=$(aws cloudformation list-exports --query "Exports[?Name=='account-resources:FhirFacadeClientCertSecret'].Value" --output text)
          aws secretsmanager get-secret-value --secret-id "${client_private_key_arn}" --query SecretString --output text > ~/.proxygen/tmp/client_private_key
          aws secretsmanager get-secret-value --secret-id "${client_cert_arn}" --query SecretString --output text > ~/.proxygen/tmp/client_cert

      - name: Configure AWS Credentials for API release
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: eu-west-2
          role-to-assume: ${{ secrets.PROXYGEN_ROLE }}
          role-session-name: proxygen-ptl

      - name: Deploy fhir-prescribing API
        shell: bash
        if: ${{ inputs.DEPLOY_APIGEE == true && always() && !failure() && !cancelled() }}
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          SPEC_PATH: ./.build/packages/specification/dist/fhir-prescribing.resolved.json
          STACK_NAME: ${{ inputs.STACK_NAME }}
          AWS_ENVIRONMENT: ${{ inputs.AWS_ENVIRONMENT }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PROXYGEN_PRIVATE_KEY_NAME: FhirPrescribingProxygenPrivateKey
          PROXYGEN_KID: fhir-prescribing
          DRY_RUN: false
          ENABLE_MUTUAL_TLS: ${{ inputs.ENABLE_MUTUAL_TLS }}
          IS_PULL_REQUEST: ${{ inputs.IS_PULL_REQUEST }}
          MTLS_KEY: ${{ inputs.MTLS_KEY }}
        run: ./.github/scripts/deploy_api.sh

      - name: Deploy fhir-dispensing API
        shell: bash
        if: ${{ inputs.DEPLOY_APIGEE == true && always() && !failure() && !cancelled() }}
        env:
          VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
          SPEC_PATH: ./.build/packages/specification/dist/fhir-dispensing.resolved.json
          STACK_NAME: ${{ inputs.STACK_NAME }}
          AWS_ENVIRONMENT: ${{ inputs.AWS_ENVIRONMENT }}
          APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
          PROXYGEN_PRIVATE_KEY_NAME: FhirDispensingProxygenPrivateKey
          PROXYGEN_KID: fhir-dispensing
          DRY_RUN: false
          ENABLE_MUTUAL_TLS: ${{ inputs.ENABLE_MUTUAL_TLS }}
          IS_PULL_REQUEST: ${{ inputs.IS_PULL_REQUEST }}
          MTLS_KEY: ${{ inputs.MTLS_KEY }}
        run: ./.github/scripts/deploy_api.sh

      - uses: actions/upload-artifact@v4
        name: Upload specs
        with:
          name: ${{ inputs.APIGEE_ENVIRONMENT }}-specs
          path: |
            ./.build/packages/specification/dist/fhir-dispensing.resolved.json
            ./.build/packages/specification/dist/fhir-prescribing.resolved.json

  prescribing_regression_tests:
    if: ${{ inputs.RUN_REGRESSION_TEST == true && always() && !failure() && !cancelled() }}
    name: Prescribing Regression Tests
    uses: ./.github/workflows/run_regression_tests.yml
    needs: release_code_and_api
    with:
      ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      PRODUCT: EPS-FHIR-PRESCRIBING
    secrets:
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  dispensing_regression_tests:
    if: ${{ inputs.RUN_REGRESSION_TEST == true && always() && !failure() && !cancelled() }}
    name: Dispensing Regression Tests
    uses: ./.github/workflows/run_regression_tests.yml
    needs: release_code_and_api
    with:
      ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      PRODUCT: EPS-FHIR-DISPENSING
    secrets:
      REGRESSION_TESTS_PEM: ${{ secrets.REGRESSION_TESTS_PEM }}

  pact_tests:
    if: ${{ inputs.RUN_REGRESSION_TEST == true && always() && !failure() && !cancelled() }}
    name: Pact Tests
    uses: ./.github/workflows/run_pact_tests.yml
    needs: release_code_and_api
    with:
      APIGEE_ENVIRONMENT: ${{ inputs.APIGEE_ENVIRONMENT }}
      VERSION_NUMBER: ${{ inputs.VERSION_NUMBER }}
      IS_PULL_REQUEST: ${{ inputs.IS_PULL_REQUEST }}
    secrets:
      API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
      API_CLIENT_SECRET: ${{ secrets.API_CLIENT_SECRET }}
      SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
      SIGNING_CERT: ${{ secrets.SIGNING_CERT }}
